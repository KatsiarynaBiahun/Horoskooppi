/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.horoskoopi;

import java.awt.Color;

/**
 *
 * @author 20128509
 */
public class Horoskooppi extends javax.swing.JFrame {

    /**
     * Creates new form Horoskooppi
     */
    public Horoskooppi() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtxtPaiva = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jcboKuukausi = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jlblHoroskooppi = new javax.swing.JLabel();
        jlblValokuva = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Ole hyvä ja anna syntymäpäiväsi ja valitset syntymäkuukautesi, niin kerron horoskooppisi. ");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Syntymäaika:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Kuukausi:");

        jcboKuukausi.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tammikuu", "Helmikuu", "Maaliskuu", "Huhtikuu", "Toukokuu", "Kesäkuu", "Heinäkuu", "Elokuu", "Syyskuu", "Lokakuu", "Marraskuu", "Joulukuu" }));
        jcboKuukausi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcboKuukausiItemStateChanged(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("Horoskooppi");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(85, 85, 85))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jlblValokuva, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton1)
                            .addComponent(jcboKuukausi, 0, 173, Short.MAX_VALUE)
                            .addComponent(jtxtPaiva)
                            .addComponent(jlblHoroskooppi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1)))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jLabel1)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jtxtPaiva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jcboKuukausi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jButton1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jlblValokuva, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jlblHoroskooppi, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcboKuukausiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcboKuukausiItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jcboKuukausiItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    int paiva;
    paiva = Integer.parseInt(jtxtPaiva.getText());    
    String kuukausi = (String)(jcboKuukausi.getSelectedItem());
    //jlblHoroskooppi.setText(kuukausi);
    Boolean found = false;
    jlblHoroskooppi.setForeground(Color.black); 
    jlblValokuva.setIcon(new javax.swing.ImageIcon(""));
    
    switch (kuukausi) {
   
    // Kauris 22.12 - 19.1
    // Vesimies 20.1 - 19.2    
    case "Tammikuu":
    if (paiva>=1 && paiva<=19){
      jlblHoroskooppi.setText("Kauris");   
      jlblValokuva.setIcon(new javax.swing.ImageIcon("Kauris.png"));
      found = true;      
    } else if (paiva>=20 && paiva<=31) {
        jlblHoroskooppi.setText("Vesimies");
        jlblValokuva.setIcon(new javax.swing.ImageIcon("Vesimies.png"));        
    }
    else {
        jlblHoroskooppi.setText("Tuntematon päivämäärä");
        jlblHoroskooppi.setForeground(Color.red);
    }
    break;
    
    // Vesimies 20.1 - 19.2
    // Kalat 20.2 - 20.3
    case "Helmikuu":
    if (paiva>=1 && paiva<=19){
      jlblHoroskooppi.setText("Vesimies");  
      jlblValokuva.setIcon(new javax.swing.ImageIcon("Vesimies.png"));  
    } else if (paiva>=20 && paiva<=29){
        jlblHoroskooppi.setText("Kalat");
        jlblValokuva.setIcon(new javax.swing.ImageIcon("Kalat.png"));  
    } 
    else {
        jlblHoroskooppi.setText("Tuntematon päivämäärä");
        jlblHoroskooppi.setForeground(Color.red);     
        }
    break;
    
    // Kalat 20.2 - 20.3
    // Oinas 21.3 - 20.4
    case "Maaliskuu":
    if (paiva>=1 && paiva<=20){
        jlblHoroskooppi.setText("Kalat");
        jlblValokuva.setIcon(new javax.swing.ImageIcon("Kalat.png"));  
    } else if (paiva>=21 && paiva<=31) {
        jlblHoroskooppi.setText("Oinas");
        jlblValokuva.setIcon(new javax.swing.ImageIcon("Oinas.png"));  
    }
    else {
        jlblHoroskooppi.setText("Tuntematon päivämäärä");
        jlblHoroskooppi.setForeground(Color.red);
    }
    break;
        
    //Oinas 21.3 - 20.4
    //Härkä 21.4 - 20.5
    case "Huhtikuu":
    if (paiva>=1 && paiva<=20){
        jlblHoroskooppi.setText("Oinas");
        jlblValokuva.setIcon(new javax.swing.ImageIcon("Oinas.png"));  
    } else if (paiva>=21 && paiva<=30) {
        jlblHoroskooppi.setText("Härkä");
        jlblValokuva.setIcon(new javax.swing.ImageIcon("Härkä.png"));  
    }
    else {
        jlblHoroskooppi.setText("Tuntematon päivämäärä");
        jlblHoroskooppi.setForeground(Color.red);
    }
    break;
            
    // Härkä 21.4 - 20.5
    // Kaksoset 21.5 - 21.6
    case "Toukokuu":
    if (paiva>=1 && paiva<=20){
        jlblHoroskooppi.setText("Härkä");
        jlblValokuva.setIcon(new javax.swing.ImageIcon("Härkä.png"));  
    } else if (paiva>=21 && paiva<=31) {
        jlblHoroskooppi.setText("Kaksoset");
        jlblValokuva.setIcon(new javax.swing.ImageIcon("Kaksoset.png"));  
    }
    else {
        jlblHoroskooppi.setText("Tuntematon päivämäärä");
        jlblHoroskooppi.setForeground(Color.red);  
    }
    break;
    
    // Kaksoset 21.5 - 21.6
    // Rapu 22.6 - 22.7
    case "Kesäkuu":
    if (paiva>=1 && paiva<=21){
        jlblHoroskooppi.setText("Kaksoset");
        jlblValokuva.setIcon(new javax.swing.ImageIcon("Kaksoset.png"));
    } else if (paiva>=22 && paiva<=30) {
        jlblHoroskooppi.setText("Rapu");
        jlblValokuva.setIcon(new javax.swing.ImageIcon("Rapu.png"));
    }
    else {
        jlblHoroskooppi.setText("Tuntematon päivämäärä");
        jlblHoroskooppi.setForeground(Color.red);    
    }
    break;
    
    // Rapu 22.6 - 22.7
    // Leijona 23.7 - 22.8
    case "Heinäkuu":
    if (paiva>=1 && paiva<=22){
       jlblHoroskooppi.setText("Rapu");
       jlblValokuva.setIcon(new javax.swing.ImageIcon("Rapu.png"));
    } else if (paiva>=23 && paiva<=31) {
       jlblHoroskooppi.setText("Leijona");
       jlblValokuva.setIcon(new javax.swing.ImageIcon("Leijona.png"));
    }
    else {
       jlblHoroskooppi.setText("Tuntematon päivämäärä");
       jlblHoroskooppi.setForeground(Color.red);     
    }
    break;
    
    // Leijona 23.7 - 22.8
    // Neitsyt 23.8 - 22.9
    case "Elokuu":
    if (paiva>=1 && paiva<=22){
       jlblHoroskooppi.setText("Leijona");
       jlblValokuva.setIcon(new javax.swing.ImageIcon("Leijona.png"));
    } else if (paiva>=23 && paiva<=31) {
    jlblHoroskooppi.setText("Neitsyt");
    jlblValokuva.setIcon(new javax.swing.ImageIcon("Neitsyt.png"));
    }
    else {
       jlblHoroskooppi.setText("Tuntematon päivämäärä");
       jlblHoroskooppi.setForeground(Color.red);  
    }
    break;
    
    // Neitsyt 23.8 - 22.9
    // Vaaka 23.9 - 22.10
    case "Syyskuu":
    if (paiva>=1 && paiva<=22){
    jlblHoroskooppi.setText("Neitsyt");
    jlblValokuva.setIcon(new javax.swing.ImageIcon("Neitsyt.png"));
    } else if (paiva>=23 && paiva<=30) {
    jlblHoroskooppi.setText("Vaaka");
    jlblValokuva.setIcon(new javax.swing.ImageIcon("Vaaka.png"));
    }
    else {
       jlblHoroskooppi.setText("Tuntematon päivämäärä");
       jlblHoroskooppi.setForeground(Color.red);  
    }
    break;
    
    // c 23.9 - 22.10
    // Skorpioni 23.10 - 22.11
    case "Lokakuu":
    if (paiva>=1 && paiva<=22){
    jlblHoroskooppi.setText("Vaaka");
    jlblValokuva.setIcon(new javax.swing.ImageIcon("Vaaka.png"));
    } else if (paiva>=23 && paiva<=31) {
    jlblHoroskooppi.setText("Skorpioni");
    jlblValokuva.setIcon(new javax.swing.ImageIcon("Skorpioni.png"));
    }
    else {
       jlblHoroskooppi.setText("Tuntematon päivämäärä");
       jlblHoroskooppi.setForeground(Color.red);  
    }
    break;
    
    // Skorpioni 23.10 - 22.11
    // Jousimies 23.11 - 22.12
    case "Marraskuu":
    if (paiva>=1 && paiva<=22){
    jlblHoroskooppi.setText("Skorpioni");
    jlblValokuva.setIcon(new javax.swing.ImageIcon("Skorpioni.png"));
    } else if (paiva>=23 && paiva<=30) {
    jlblHoroskooppi.setText("Jousimies");
    jlblValokuva.setIcon(new javax.swing.ImageIcon("Jousimies.png"));
    }
    else {
       jlblHoroskooppi.setText("Tuntematon päivämäärä");
       jlblHoroskooppi.setForeground(Color.red);  
    }
    break;
    
    // Jousimies 23.11 - 22.12
    // Kauris 22.12 - 19.1
    case "Joulukuu":
    if (paiva>=1 && paiva<=22){
    jlblHoroskooppi.setText("Jousimies");
    jlblValokuva.setIcon(new javax.swing.ImageIcon("Jousimies.png"));
    } else if (paiva>=23 && paiva<=31) {
    jlblHoroskooppi.setText("Kauris");
    jlblValokuva.setIcon(new javax.swing.ImageIcon("Kauris.png"));
    }
    else {
       jlblHoroskooppi.setText("Tuntematon päivämäärä");
       jlblHoroskooppi.setForeground(Color.red);  
    }
    break;
    
    }//GEN-LAST:event_jButton1ActionPerformed
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Horoskooppi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Horoskooppi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Horoskooppi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Horoskooppi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Horoskooppi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JComboBox<String> jcboKuukausi;
    private javax.swing.JLabel jlblHoroskooppi;
    private javax.swing.JLabel jlblValokuva;
    private javax.swing.JTextField jtxtPaiva;
    // End of variables declaration//GEN-END:variables
}
